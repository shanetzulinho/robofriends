{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","reportWebVitals.js","reducers.js","index.js"],"names":["Scroll","props","react_default","a","createElement","style","overflowY","border","height","children","Card","_ref","id","name","email","className","alt","src","concat","CardList","robots","map","uses","index","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","App","dispatch","useDispatch","searchField","useSelector","state","searchRobots","_useSelector2","requestRobots","isPending","error","useEffect","onRequestRobots","fetch","then","response","json","data","payload","catch","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","event","target","value","components_Scroll","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","createRoot","document","getElementById","render","es","src_containers_App"],"mappings":"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","file":"static/js/main.8289e6dc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>{props.children}</div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    // const {id, name, email} = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='Robot' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((uses, index) => {\n                    return ( <Card \n                            key={robots[index].id}\n                            id={robots[index].id}\n                            name={robots[index].name}\n                            email={robots[index].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n            <input \n                className='ma2 pa3 ba b--green bg-lightest-blud' \n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setSearchField, requestRobots } from '../actions'\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\nconst App = () => {\n    const dispatch = useDispatch() \n    const { searchField } = useSelector((state) => state.searchRobots)\n    const { robots, isPending, error } = useSelector(\n        (state) => state.requestRobots\n    )\n\n    useEffect(() => {\n        onRequestRobots()\n    }, [])\n\n    const onRequestRobots = () => {\n        dispatch(requestRobots())\n    }\n\n    const onSearchChange = (event) => {\n        dispatch(setSearchField(event.target.value))\n    }\n\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (isPending)\n        return <h1 className='f1 tc'>LOADING</h1>\n\n    if (!error)\n        return (\n            <div  className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>\n        )\n}\n\nexport default App;","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { legacy_createStore as createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}